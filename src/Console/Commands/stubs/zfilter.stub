<?php

namespace App\Filters;

use Kayckmatias\ZFilter\FilterBuilder;
use Kayckmatias\ZFilter\FilterContract;
use Illuminate\Database\Eloquent\Builder;

class {{CLASS_NAME}} extends FilterBuilder implements FilterContract
{
    /**
     * Apply the available filters and return the result.
     *
     * @return array The filtered result.
     */
    public function apply(): Builder
    {
        $filters = $this->getAvailableFilters();

        return $this->filtersMake($filters['simple'], $filters['complex']);
    }

    /**
     * Get the available filters.
     *
     * @return array
     */
    public function getAvailableFilters(): array
    {
        $simpleFilters = $this->getSimpleFilters();
        $relationFilters = $this->getRelationFilters();
        $complexFilters = $this->getComplexFilters();

        return [$simpleFilters, $relationFilters, $complexFilters];
    }

    /**
     * Returns the simple filters.
     *
     * @return array The list of simple filters.
     */
    public function getSimpleFilters(): array
    {
        return [
            // Define the simple filters here, example: ['categories' => 'category_id']
        ];
    }

    /**
     * Get the relation filters.
     *
     * @return array The relation filters
     */
    public function getRelationFilters(): array
    {
        return [
            // Define the relation filters here, example: ['setor' => ['setores' => 'id']]
        ];
    }

    /**
     * Retrieves the complex filters.
     *
     * @return array The complex filters.
     */
    public function getComplexFilters(): array
    {
        return [
            /* Define the complex filters here, example:
            'search' => function ($q, $filterValue) {
                $q->where(function ($q) use ($filterValue) {
                    $q->where('title', 'LIKE', "%" . $filterValue . "%");
                    $q->orWhere('desc', 'LIKE', "%" . $filterValue . "%");
                });
            }, */
        ];
    }
}
